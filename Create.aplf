 msg←{opts}Create(ns dir)
 ;Default;isWin;container;z;links;Qt;fsw;ix;linkDef;outFail;inFail;nsref;win;nsrefs;link;Arrow;arrow;OsSlash;isChild;⎕IO
 :If ~×⎕NC'⎕SE.Link.DEBUG'
     ⎕SE.Link.DEBUG←0
 :ElseIf ⎕SE.Link.DEBUG=2
     (1+⊃⎕LC)⎕STOP⊃⎕SI
 :EndIf
 :Trap ⎕SE.Link.DEBUG↓0
     ⎕IO←1
     '⎕SE.Link'⎕NS ⍬
     :If 0=⎕NC'⎕SE.Link.Links'    ⍝ Check existence of our data structure
         ⎕SE.Link.Links←⍬         ⍝ Start with no links
 ⍝ Link namespaces will record switch values
 ⍝    and also contain fsw, the FileSystemWatcher object
     :EndIf

     msg←⍕⍬⊤⍬
     opts←DefaultOpts'opts'⎕NS ⍬
     container←⊃⌽2⍴⎕RSI    ⍝ ns is relative to where we were called from
     ns←⍕ns
     isChild←~'⎕SE'(,'#')'⎕DMX'∊⍨⊂ns
     ns,⍨←isChild/'.',⍨⍕container

     dir←∊1 ⎕NPARTS⊃⊃⎕NINFO⍠1⊢dir ⍝ normalise name

     win←'Windows'≡7↑⊃'.'⎕WG'APLVersion'
     OsSlash←'/'@{⍵='/'}⍣win
     dir←OsSlash dir

     Arrow←{
         lr←'←→'/⍨2 2⊤'dir' 'ns' 'both'⍳⊂⍵.watch
         ⍵.ns,' ',lr,' ',OsSlash ⍵.dir
     }
     :If ~win
     :AndIf (⊂opts.watch)∊'both' 'dir'
         msg←'Watching directories is only supported under Microsoft Windows'
     :ElseIf isChild>0 9.1∊⍨container.⎕NC⊂ns ⍝ must be normal namespace
         msg←'Unavailable: ',ns
     :ElseIf ×≢⎕SE.Link.Links⊣nsref←⍎ns container.⎕NS ⍬
     :AndIf nsref∊nsrefs←⍎¨⎕SE.Link.Links.ns
         link←⎕SE.Link.Links⊃⍨nsrefs⍳nsref
         msg←'Already linked: ',Arrow link
     :ElseIf {16::0 ⋄ 1⊣⎕SRC ⍵}nsref
         msg←'Scipted: ',ns
     :ElseIf ~⎕NEXISTS dir←∊1 ⎕NPARTS dir
     :AndIf ~3 ⎕MKDIR dir
         msg←'Directory not found: ',dir
     :ElseIf 0≡opts.source
     :AndIf ∧/0≠(≢nsref.⎕NL-⍳10),≢⊃(⎕NINFO⍠1)dir,'/*'
         msg←'Source must be specified when linking a non-empty namespace to a non-empty directory'
     :ElseIf opts.(flatten∧source≢'dir')
         msg←'flatten≡1 requires source≡''dir'''
     :Else

  ⍝ We're all good; do it!
         inFail←outFail←fsw←⍬
         ix←'[',(⍕(0(86⌶)'⎕IO')+≢⎕SE.Link.Links),']'     ⍝ fix ⎕IO!
         msg←0⍴⊂''
         :If 'ns' 'both'∊⍨⊂opts.source
             outFail←opts WriteFiles nsref dir
         :AndIf 0≠≢outFail
             msg,←⊂(⍕≢outFail),' export(s) failed (⎕SE.Link.Links',ix,'.outFail)'
         :EndIf

         :If 'dir' 'both'∊⍨⊂opts.source
             (inFail fsw)←opts FixFiles nsref dir
         :AndIf 0≠≢inFail
             msg,←⊂(⍕≢inFail),' imports failed (⎕SE.Link.Links',ix,'.inFail)'
         :EndIf

         linkDef←⎕SE.⎕NS opts

         'linkDef'⎕NS'ns' 'dir' 'inFail' 'outFail'
         arrow←Arrow linkDef
         linkDef.⎕DF 1⌽'][',arrow
         ⎕SE.Link.Links,←linkDef
         msg←⊃{⍺,'; ',⍵}/msg,⍨⊂'Linked: ',arrow
     :EndIf
 :Else
     ⎕SIGNAL⊂⎕DMX.(('EN'EN)('Message'Message))
 :EndTrap
